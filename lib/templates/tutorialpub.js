// Generated by CoffeeScript 1.12.2
(function() {
  var MeshLab, THREE, View, env, fs;

  fs = require('fs');

  env = require('../../env');

  THREE = require(env.PATH.THREE + "build/three");

  (function() {
    var file;
    file = fs.readFileSync(env.PATH.THREE + "examples/js/loaders/STLLoader.js", 'utf-8');
    eval(file);
    file = fs.readFileSync(env.PATH.THREE + "examples/js/loaders/3MFLoader.js", 'utf-8');
    eval(file);
    file = fs.readFileSync(env.PATH.THREE + "examples/js/loaders/OBJLoader.js", 'utf-8');
    eval(file);
    file = fs.readFileSync(env.PATH.THREE + "examples/js/controls/OrbitControls.js", 'utf-8');
    return eval(file);
  })();

  View = (function() {
    function View() {
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.01, 10000);
      this.clock = new THREE.Clock();
      this.objects = {};
      this._control = null;
    }

    View.prototype.init = function(renderer) {
      renderer.setClearColor(0xDBDBDB);
      renderer.gammaInput = true;
      renderer.gammaOutput = true;
      this._control = new THREE.OrbitControls(this.camera, renderer.domElement);
      this._control.enableZoom = true;
      this.camera.position.set(20, 20, 0);
      this.camera.lookAt(new THREE.Vector3());
      this.scene.add(new THREE.HemisphereLight(0xffffbb, 0x080820, 1));
      this._addShadowedLight(1, 1, 1);
    };

    View.prototype.add = function(mesh) {
      return this.scene.add(mesh);
    };

    View.prototype.remove = function(mesh) {
      return this.scene.remove(mesh);
    };

    View.prototype.onRender = function() {
      var dt;
      dt = this.clock.getDelta();
      this._control.update();
    };

    View.prototype._addShadowedLight = function(x, y, z, d, color, intensity) {
      var directLight;
      if (d == null) {
        d = 10000;
      }
      if (color == null) {
        color = 0xffffbb;
      }
      if (intensity == null) {
        intensity = 1;
      }
      directLight = new THREE.DirectionalLight(color, intensity);
      directLight.position.set(x, y, z);
      this.scene.add(directLight);
    };

    return View;

  })();

  MeshLab = {
    View: View,
    THREE: THREE,
    env: env,
    STLLoader: THREE.STLLoader,
    OBJLoader: THREE.OBJLoader,
    ThreeMFLoader: THREE.ThreeMFLoader
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MeshLab;
  }

}).call(this);

//# sourceMappingURL=tutorialpub.js.map
